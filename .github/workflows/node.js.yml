name: Node.js CI/CD

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - run: npm ci
    
    - name: Run Tests
      run: npm test
    
    - name: Set up .env
      run: |
        touch .env
        echo "${{ secrets.PROD_ENV_FILE }}" > .env
    
    - name: Backup Current Production Code
      run: |
        ssh -i "${{ secrets.PEM_FILE }}" ubuntu@65.0.193.48 'bash -s' << 'EOF'
        # Define absolute paths
        CURRENT_PRODUCTION="/home/ubuntu/actions-runner/_work/auto-deployment-demo/auto-deployment-demo"
        BACKUP_DIR="/home/ubuntu/actions-runner/_work/auto-deployment-demo/backup"

        # Create the backup directory if it doesn't exist
        mkdir -p $BACKUP_DIR

        # Create a timestamped backup directory
        TIMESTAMP=$(date +%F-%T)
        BACKUP_PATH="$BACKUP_DIR/production-$TIMESTAMP"

        # Copy current production to the backup directory
        cp -r $CURRENT_PRODUCTION $BACKUP_PATH

        echo "Backup created at $BACKUP_PATH"
        EOF
    
    - name: Deploy to Production
      run: |
        scp -i "${{ secrets.PEM_FILE }}" -r . ubuntu@65.0.193.48:/home/ubuntu/actions-runner/_work/auto-deployment-demo/auto-deployment-demo

    - name: Install Dependencies on Production
      run: |
        ssh -i "${{ secrets.PEM_FILE }}" ubuntu@65.0.193.48 'bash -s' << 'EOF'
        cd /home/ubuntu/actions-runner/_work/auto-deployment-demo/auto-deployment-demo
        npm ci
        npm start &  # Run the application in the background
        sleep 10  # Wait for 10 seconds to give the application time to start
        EOF

    - name: Monitor Production for Errors
      run: |
        ssh -i "${{ secrets.PEM_FILE }}" ubuntu@65.0.193.48 'bash -s' << 'EOF'
        # Check application status (replace with actual check)
        if curl -f http://localhost:8000; then
          echo "Deployment successful"
        else
          echo "Deployment failed"
          exit 1
        fi
        EOF

    - name: Revert to Previous Production Version if Errors Occur
      if: failure()
      run: |
        ssh -i "${{ secrets.PEM_FILE }}" ubuntu@65.0.193.48 'bash -s' << 'EOF'
        # Define absolute paths
        BACKUP_DIR="/home/ubuntu/actions-runner/_work/auto-deployment-demo/backup"
        CURRENT_PRODUCTION="/home/ubuntu/actions-runner/_work/auto-deployment-demo/auto-deployment-demo"

        # Find the latest backup
        latest_backup=$(ls -dt $BACKUP_DIR/production-* | head -1)

        # Revert to the latest backup
        if [ -d "$latest_backup" ]; then
          rm -rf $CURRENT_PRODUCTION
          cp -r "$latest_backup" $CURRENT_PRODUCTION
          echo "Reverted to backup: $latest_backup"
        else
          echo "No backup found to revert to"
          exit 1
        fi
        EOF
